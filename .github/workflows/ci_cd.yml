name: CI Pipeline

on:
  push:
    branches:
      - 'releases/**'
      - develop
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Build Docker images
      run: docker-compose build

    - name: Run tests
      run: docker-compose run --rm tests

    - name: Extract version from branch name
      id: extract_version
      run: |
        VERSION=$(echo ${GITHUB_REF#refs/heads/releases/} | sed 's/\//-/g')
        echo "version=$VERSION" >> $GITHUB_ENV

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image
      run: docker push marleg89/flask-app:$${{ steps.extract_version.outputs.version }}

  deploy:
    runs-on: self-hosted  

    steps:
      - name: Vérifier le code source
        uses: actions/checkout@v3
        with:
          lfs: true
      - name: Checkout LFS objects
        run: git lfs pull

      - name: Configurer Terraform
        env:
          TF_VAR_poolpath: ${{ secrets.POOL_PATH }}
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: | 
          terraform init \
            -backend-config="organization=${{ secrets.TF_ORGANIZATION }}" \
            -backend-config="workspaces.name=${{ secrets.TF_WORKSPACE }}"
          terraform apply -auto-approve
        working-directory: ./Terraform_scripts

      - name: Exécuter le script Ansible
        run: |  
          ansible-playbook site.yml -i inventory.ini 
        working-directory: ./Ansible_scripts

      - name: Extract version from branch name
        id: extract_version
        run: |
          VERSION=$(echo ${GITHUB_REF#refs/heads/releases/} | sed 's/\//-/g')
          echo "::set-output name=version::$VERSION"

      - name: Update Kubernetes manifest with new image tag
        run: |
          sed -i "s|image: my-dockerhub-repo/myapp:.*|image: my-dockerhub-repo/myapp:${{ steps.extract_version.outputs.version }}|" k8s/deployment.yaml
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add k8s/deployment.yaml
          git commit -m "Update manifest with new image tag ${{ steps.extract_version.outputs.version }}" || echo "No changes to commit"

      - name: Push changes to GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        run: |
          git push || echo "Nothing to push"

